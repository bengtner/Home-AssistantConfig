# Configure a default setup of Home Assistant (frontend, api, etc)

default_config:

# Text to speech
tts:
  - platform: google_translate
cloud:

# timers
timer:
  vattenaltan:
  vattenvaxthus:
#    duration: {{(60*states('input_number.vattenvaxthus')|int)|timestamp_custom("%H:%M:%S",0)}}

template:
  - sensor:
      - name: Rainfall today
        unit_of_measurement: mm
        state_class: total_increasing
        unique_id: rainfall_today
        state: >-
          {% set count = states('sensor.rainsensor_flips') | int(0) %}
          {% set mm = count * 0.30303 %}
          {% if count >= 0 %}
            {{ mm|round(1, 'floor') }}
          {% endif %}

      - name: "Heating level"
        state: "Normal"
      #          {% if states('sensor.electricity_price_torngard_201')|float(0) > states('input_number.max_pris')|float(0) %}
      #            Off
      #          {% elif states('sensor.electricity_price_torngard_201')|float(0)
      #            > state_attr('sensor.electricity_price_torngard_201', 'avg_price')|float(0)
      #            * (1.0 + (states('input_number.niva')|float(0))/100.0 ) %}
      #            Eco
      #          {% else %}
      #            Normal
      #          {% endif %}
      #- name: "Hour"
      #  state: "{{ as_timestamp(states('sensor.date_time_iso')) | timestamp_custom('%H') }}"
      #  icon: "mdi:calendar-clock"
      - name: "Sun power"
        unique_id: "Sun power"
        state: >
          {% if states('sensor.nordpool_kwh_se4_sek_3_10_0')|float(0) < (state_attr('sensor.nordpool_kwh_se4_sek_3_10_0','average')|float(0) + states('input_number.fees')|float(0)/100 +states('input_number.natavgift')|float(0)/100)*1.25 and states('sensor.inverter_active_power')|float(0) > 1000 and states('input_select.battery_mode') != 'Discharge' %}
            on
          {% else %}
            off
          {% endif %}

      - name: "Pool circulation all"
        state: >
          {% if is_state('switch.poolcirculation','on') or is_state('switch.poolheating','on') %}
            on 
          {% else %}
            off
          {% endif %}
      - name: "Water fill daily minutes"
        state: >
          {% set hours = states('sensor.waterfill_daily') | float %} 
          {% set minutes = ((hours % 1) * 60) | int %}  
          {% set hours = (hours - (hours % 1)) | int %}  
          {{ (hours*60 + minutes) | int }}

      - name: "Battery charge and discharge"
        unique_id: "Battery charge and discharge"
        device_class: "monetary"
        unit_of_measurement: "SEK"
        state: >
          {% set netcost= 0.70 %}
          {% if states('sensor.battery_charge_discharge_power')|float(0) > 0 %}
          {{states('sensor.battery_charge_discharge_power')|float(0)*(states('sensor.nordpool_kwh_se4_sek_3_10_0')|float(0)+ netcost)/1000.0}}
          {% else %}
          {{states('sensor.battery_charge_discharge_power')|float(0)*states('sensor.nordpool_kwh_se4_sek_3_10_0')|float(0)/1000.0}}
          {% endif %}
      - name: "Instant cost of electricity"
        unique_id: "Instant cost of electricity"
        device_class: "monetary"
        unit_of_measurement: "SEK"
        state: >
          {% set netcost= 0.70 %}
          {% if states('sensor.power_meter_active_power')|float(0) < 0 %}
          {{states('sensor.power_meter_active_power')|float(0)*(states('sensor.nordpool_kwh_se4_sek_3_10_0')|float(0)+netcost)/1000.0}}
          {% else %}
          {{states('sensor.power_meter_active_power')|float(0)*states('sensor.nordpool_kwh_se4_sek_3_10_0')|float(0)/1000.0}}
          {% endif %}
      - name: "Instant value self consumption"
        unique_id: "Instant value self consumption"
        device_class: "monetary"
        unit_of_measurement: "SEK"
        state: >
          {%if states('sensor.power_meter_active_power')|float(0) > 0  and states('sensor.inverter_active_power')|float(0) > 0 %}
          {{(states('sensor.inverter_active_power')|float(0) - states('sensor.power_meter_active_power')|float(0))*states('sensor.nordpool_kwh_se4_sek_3_10_0')|float(0)/1000.0  }}
          {% elif states('sensor.inverter_active_power')|float(0) > 0 %}
          {{states('sensor.inverter_active_power')|float(0)*states('sensor.nordpool_kwh_se4_sek_3_10_0')|float(0)/1000.0  }}
          {% else %}
          0.0
          {%endif %}

sensor:
  #- platform: time_date
  #  display_options:
  #    - "date"
  #    - "time"
  #    - "date_time_iso"

  - platform: history_stats
    name: Rainsensor flips
    entity_id: binary_sensor.ewelink_ds01_opening #The Sonoff window sensor
    state: "off"
    type: count
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"

  - platform: nordpool
    region: "SE4"
    VAT: false
  - platform: history_stats
    name: Poolheating daily
    entity_id: switch.poolheating
    state: "on"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"
  - platform: history_stats
    name: Waterfill daily
    entity_id: switch.poolwater
    state: "on"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"
  - platform: history_stats
    name: Watercirculation daily
    entity_id: sensor.pool_circulation_all
    state: "on"
    type: time
    start: "{{ now().replace(hour=0, minute=0, second=0) }}"
    end: "{{ now() }}"
  - platform: filter
    name: "Filtered low water"
    entity_id: binary_sensor.poolwaterlevel
    filters:
      - filter: time_throttle
        window_size: "0:10"
  - platform: integration
    source: sensor.battery_charge_and_discharge
    name: Charge and discharge of battery
    unique_id: "Charge and discharge of battery"
    unit_time: h
    method: "left"
    #    unit_prefix: k
    round: 2
  - platform: integration
    source: sensor.instant_cost_of_electricity
    name: Electricity cost
    unique_id: "Electricity cost"
    unit_time: h
    method: "left"
    #    unit_prefix: k
    round: 2
  - platform: filter
    name: "Filtered inverter activer power"
    entity_id: sensor.inverter_active_power
    filters:
      - filter: lowpass
        time_constant: 10

climate:
  - platform: simple_thermostat
    name: Uterum
    heater: switch.uterum
    target_sensor: sensor.uterum
    min_temp: 0.0
    max_temp: 25.0
    #    target_temp: 5.0
    ac_mode: false
    cold_tolerance: 0.3
    hot_tolerance: 0
    min_cycle_duration:
      minutes: 10
    keep_alive:
      minutes: 10
    initial_hvac_mode: "heat"
    precision: 1

  - platform: simple_thermostat
    name: Badrum gamla huset
    heater: light.golvvarme_badrum_on_off
    target_sensor: sensor.badrum_iii_temperature
    min_temp: 0.0
    max_temp: 25.0
    #    target_temp: 5.0
    ac_mode: false
    cold_tolerance: 0.3
    hot_tolerance: 0
    min_cycle_duration:
      minutes: 10
    keep_alive:
      minutes: 10
    initial_hvac_mode: "heat"
    precision: 1

  - platform: simple_thermostat
    name: Sovrum plan2
    heater: switch.sovrum_plan2_el
    target_sensor: sensor.0xa4c1380deaf2eaf7_temperature
    min_temp: 0.0
    max_temp: 25.0
    #    target_temp: 20.0
    ac_mode: false
    cold_tolerance: 0.3
    hot_tolerance: 0
    min_cycle_duration:
      minutes: 10
    keep_alive:
      minutes: 10
    initial_hvac_mode: "heat"
    precision: 1

  - platform: simple_thermostat
    name: Hall
    heater: switch.hall
    target_sensor: sensor.hall
    min_temp: 0.0
    max_temp: 25.0
    #    target_temp: 20.0
    ac_mode: false
    cold_tolerance: 0.3
    hot_tolerance: 0
    min_cycle_duration:
      minutes: 10
    keep_alive:
      minutes: 10
    initial_hvac_mode: "heat"
    precision: 1

  - platform: simple_thermostat
    name: Badrum
    heater: switch.badrum
    target_sensor: sensor.badrum
    min_temp: 0.0
    max_temp: 25.0
    #    target_temp: 20.0
    ac_mode: false
    cold_tolerance: 0.3
    hot_tolerance: 0
    min_cycle_duration:
      minutes: 10
    keep_alive:
      minutes: 10
    initial_hvac_mode: "heat"
    precision: 1

  - platform: simple_thermostat
    name: Sovrum nb
    heater: switch.sovrum_nb
    target_sensor: sensor.sovrum_nb
    min_temp: 0.0
    max_temp: 25.0
    #    target_temp: 20.0
    ac_mode: false
    cold_tolerance: 0.3
    hot_tolerance: 0
    min_cycle_duration:
      minutes: 10
    keep_alive:
      minutes: 10
    initial_hvac_mode: "heat"
    precision: 1

  - platform: simple_thermostat
    name: Storstuga
    heater: switch.storstuga
    #target_sensor: sensor.storstugan_temperature
    target_sensor: sensor.kok
    min_temp: 0.0
    max_temp: 25.0
    #    target_temp: 20.0
    ac_mode: false
    cold_tolerance: 0.3
    hot_tolerance: 0
    min_cycle_duration:
      minutes: 10
    keep_alive:
      minutes: 10
    initial_hvac_mode: "heat"
    precision: 1

  - platform: simple_thermostat
    name: Kök
    heater: switch.kok
    target_sensor: sensor.kok
    min_temp: 0
    max_temp: 25
    #    target_temp: 20
    ac_mode: false
    cold_tolerance: 0.3
    hot_tolerance: 0
    min_cycle_duration:
      minutes: 10
    keep_alive:
      minutes: 10
    initial_hvac_mode: "heat"
    precision: 1

  - platform: simple_thermostat
    name: Pool
    heater: switch.poolheating
    target_sensor: sensor.pooltemp
    min_temp: 5.0
    max_temp: 30.0
    #    target_temp: 5.0
    ac_mode: false
    cold_tolerance: 0.3
    hot_tolerance: 0
    min_cycle_duration:
      minutes: 10
    keep_alive:
      minutes: 10
    initial_hvac_mode: "heat"
    precision: 0.5

switch:
  - platform: group
    name: "Värmegolv"
    entities:
      - switch.storstuga
      - switch.sovrum_nb
      - switch.badrum
      - switch.kok
      - switch.uterum
      - switch.hall

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
utility_meter: !include utility_meter.yaml
